// Sacamos los metodos de parseo fuera del pipeline 
//TODO ver si se puede pasar a una propia clase groovy

def parseXml(String xmlContent) {
    def parsedXml = new XmlSlurper().parseText(xmlContent)
    def metrics = [
        testsuitesAttributes: [
            name: parsedXml.'@name'.text(),
            totalTime: parsedXml.'@time'.text().toFloat(),
            totalTests: parsedXml.'@tests'.text().toInteger(),
            totalFailures: parsedXml.'@failures'.text().toInteger(),
            totalErrors: parsedXml.'@errors'.text().toInteger()
        ],
        testsuite: parsedXml.testsuite.collect {
            [
                name: it.'@name'.text(),
                totalTime: it.'@time'.text().toFloat(),
                totalTests: it.'@tests'.text().toInteger(),
                skipped: it.'@skipped'.text().toInteger(),
                totalFailures: it.'@failures'.text().toInteger(),
                totalErrors: it.'@errors'.text().toInteger(),
                timestamp: it.'@timestamp'.text(),
                hostname: it.'@hostname'.text(),
                id: it.'@id'.text(),
                testcase: it.testcase.collect {
                    [
                        name: it.'@name'.text(),
                        time: it.'@time'.text().toFloat(),
                        classname: it.'@classname'.text(),
                        status: it.'@status'.text()
                    ]
                }
            ]
        }
    ]
    return metrics
}

def constructPrometheusData(Map metrics) {
    StringBuilder prometheusData = new StringBuilder()

    // Agrega las métricas de nivel de testsuites
    prometheusData.append("""
# HELP katalon_total_tests Total number of tests
# TYPE katalon_total_tests gauge
katalon_total_tests ${metrics.testsuitesAttributes.totalTests}

# HELP katalon_total_failures Total number of failed tests
# TYPE katalon_total_failures gauge
katalon_total_failures ${metrics.testsuitesAttributes.totalFailures}

# HELP katalon_total_errors Total number of errors in tests
# TYPE katalon_total_errors gauge
katalon_total_errors ${metrics.testsuitesAttributes.totalErrors}

# HELP katalon_total_time Total time of test suite execution
# TYPE katalon_total_time gauge
katalon_total_time ${metrics.testsuitesAttributes.totalTime}
""")

    // Agrega las métricas de nivel de testsuite y testcase
    metrics.testsuite.each { suite ->
        suite.testcase.each { case ->
            prometheusData.append("""
# HELP katalon_testsuite_total_tests Total number of tests for ${suite.name}
# TYPE katalon_testsuite_total_tests gauge
katalon_testsuite_total_tests{name="${suite.name}",classname="${case.classname}"} ${suite.totalTests}

# HELP katalon_testcase_time Execution time for test case
# TYPE katalon_testcase_time gauge
katalon_testcase_time{name="${suite.name}",testcase="${case.name}",status="${case.status}"} ${case.time}
""")
        }
    }
    return prometheusData.toString()
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
          PUSHGATEWAY_URL = 'http://localhost:9091' 
    }

    stages {
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    // katalon.xml está en el directorio actual
                    def katalonXml = readFile('katalon.xml')

                    // parseXml para parsear el XML
                    def metrics = parseXml(katalonXml)

                    // Imprimir los resultados en la consola
                    echo "Metrics parsed: ${metrics}"

                    // Construye la cadena de datos para Prometheus con las métricas
                    def prometheusData = constructPrometheusData(metrics)

                    // Escribe las métricas en un archivo
                    writeFile(file: 'katalon.prom', text: prometheusData)

                    // imprimimos el contenido de 'prometheusData'
                    echo "Prometheus data:\n${prometheusData}"
                }
            }
        }

        stage('Send to Prometheus') {
              steps {
                  script {
                      
                      def prometheusData = readFile('katalon.prom').trim()
                      if (prometheusData) {
                        //def pushgatewayHost = '127.0.0.1'
                        //def pushgatewayPort = '9091' 
                        def pushgatewayUrl = "http://pushgateway-prometheus-pushgateway.default.svc.cluster.local:9091/metrics/job/katalon"
                        def response = sh(script: "curl -X POST --data-binary @katalon.prom ${pushgatewayUrl}", returnStdout: true).trim()
                        echo "Response from Pushgateway: ${response}"
                      } else {
                          error("Prometheus data está vacío, no envía al Pushgateway")
                      }
                  }
              }
          }
    }
}