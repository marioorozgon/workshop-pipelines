// Define the methods outside of the pipeline block to avoid serialization issues

def parseXml(String xmlContent) {
    def parsedXml = new XmlSlurper().parseText(xmlContent)
    // Extract the metrics and convert them to serializable types
    def metrics = [
        totalTests: parsedXml.'@tests'.text().toInteger(),
        totalFailures: parsedXml.'@failures'.text().toInteger(),
        totalErrors: parsedXml.'@errors'.text().toInteger(),
        totalTime: parsedXml.'@time'.text().toFloat()
    ]
    return metrics
}

def constructPrometheusData(Map metrics) {
    return """
# HELP katalon_total_tests Total number of tests
# TYPE katalon_total_tests gauge
katalon_total_tests ${metrics.totalTests}

# HELP katalon_total_failures Total number of failed tests
# TYPE katalon_total_failures gauge
katalon_total_failures ${metrics.totalFailures}

# HELP katalon_total_errors Total number of errors in tests
# TYPE katalon_total_errors gauge
katalon_total_errors ${metrics.totalErrors}

# HELP katalon_total_time Total time of test suite execution
# TYPE katalon_total_time gauge
katalon_total_time ${metrics.totalTime}
"""
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
        PUSHGATEWAY_URL = 'pushgateway:9091'
        WEBSITE_URL = 'https://www.accenture.com/es-es'
        JOB_NAME = 'accenture_es_es'
    }

    stages {
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    // Asumiendo que katalon.xml est√° en el directorio actual
                    def katalonXml = readFile('katalon.xml')

                    // Use the parseXml method to parse the XML
                    def metrics = parseXml(katalonXml)

                    // Construct the Prometheus data string with the metrics
                    def prometheusData = constructPrometheusData(metrics)

                    // Write the metrics to a file
                    writeFile(file: 'katalon.prom', text: prometheusData)
                }
            }
        }

        /*
        stage('Send to Prometheus') {
            steps {
                prometheus([
                    jobName: 'katalon',
                    scrapeInterval: '1m',
                    scrapeTimeout: '10s',
                    metricsPath: '/metrics',
                    pushGatewayUrl: 'http://prometheus-pushgateway:9091',
                    pushGatewayJobName: 'katalon',
                    credentialsId: 'prometheus-pushgateway-credentials'
                ]) {
                    sh 'cat katalon.prom | curl --data-binary @- http://prometheus-pushgateway:9091/metrics/job/katalon'
                }
            }
        }*/
    }
}
