@Library('my-shared-library') _

@NonCPS
def generateCustomHash() {
    def jobName = env.JOB_NAME ?: 'UnknownJob'
    def buildNumber = env.BUILD_NUMBER ?: '0'
    def currentTime = System.currentTimeMillis().toString()

    def stringToHash = "${jobName}-${buildNumber}-${currentTime}"
    def hash = stringToHash.hashCode().toString()

    return hash
}

@NonCPS
def parseAndGenerateMetrics(def xmlFilesOutput) {
    //def xmlFileList = xmlFilesOutput.split('\\r?\\n')
    def prometheusData = """
        # HELP katalon_testsuites_info Test Suites Information
        # TYPE katalon_testsuites_info gauge
        # HELP katalon_testsuite_info Test Suite Information
        # TYPE katalon_testsuite_info gauge
        # HELP katalon_testcase_info Test Case Information
        # TYPE katalon_testcase_info gauge
        """

    xmlFilesOutput.each { filePath ->
        def katalonXmlContent = readFile(filePath)
        def metrics = parseXml(katalonXmlContent)

        echo "Metrics parsed for ${filePath}: ${metrics}"

        prometheusData += constructPrometheusMetrics(metrics, env.PIPELINE_HASH)
        echo "Processing file: ${filePath}"
    }

    return prometheusData
}

    node () {

                //Se dejan comentados metodos originales katalon 
                //stage ('katalon_GTI- SCM') {
 	            //    checkout([$class: 'GitSCM', branches: [[name: '*/preproduccion']], doGenerateSubmoduleConfigurations: false, userRemoteConfigs: [[credentialsId: 'Admin_GitLab', url: 'https://git.seur.es/testing/gti']]]) 
	            //} 

	            //stage ('katalon_GTI - Build') {
                //    bat 'F:\\Katalon_Studio_Engine_Windows_64-8.1.0\\katalonc.exe -noSplash -runMode=console -projectPath="C:\\Jenkins\\workspace\\katalon_gti_pre\\GTI.prj" -retry=0 -testSuitePath="Test Suites/GTI" -executionProfile="default" -browserType="Chrome" -apiKey="c4e2bb00-7501-4a41-a22b-f5fb239efc6f" --config -proxy.auth.option=NO_PROXY -proxy.system.option=NO_PROXY -proxy.system.applyToDesiredCapabilities=true'
	            //} 


                println "Hola 1"
                stage ('PreparaciÃ³n') {
                    script {
                        env.PIPELINE_TIMESTAMP = new Date().format('yyyy-MM-dd HH:mm:ss')
                        echo "${env.PIPELINE_TIMESTAMP}"
                    }
                }
                println "Hola 2"
                stage('Generate Hash') {
                    script {
                       env.PIPELINE_HASH = generateCustomHash()
                       echo "${env.PIPELINE_HASH}"
                    }
                }
                
                stage('Parse Katalon XML') {
                    script {
                        withCredentials([file(credentialsId: 'katalon-test-001', variable: 'secretFile')]) {
                            sh 'cat $secretFile > junit.xml'
                            
                            // findFiles para buscar junit.xml
                            foundFiles = findFiles(glob: 'junit.xml')
                            if (foundFiles.length == 0) {
                                echo "Archivo junit.xml no encontrado"
                                return
                            }

                            //path del primer archivo encontrado
                            xmlFilePath = foundFiles[0].path
                            echo "Archivo encontrado: ${xmlFilePath}"

                            katalonXmlContent = readFile(xmlFilePath)
                            parsedResults = parseXml(katalonXmlContent)

                            echo "Metrics parsed: ${parsedResults}"

                            prometheusData = """
                            # HELP katalon_testsuites_info Test Suites Information
                            # TYPE katalon_testsuites_info gauge
                            # HELP katalon_testsuite_info Test Suite Information
                            # TYPE katalon_testsuite_info gauge
                            # HELP katalon_testcase_info Test Case Information
                            # TYPE katalon_testcase_info gauge
                            """

                            prometheusData += constructPrometheusMetrics(parsedResults, env.PIPELINE_HASH)

                            writeFile(file: 'katalon.prom', text: prometheusData)
                            echo "Combined Prometheus data:\n${prometheusData}"

                        }
                    }
                }
                /* //Stage para futuro envio a pushgateway de prometheus
                stage('Send to Prometheus') {
                        script {
                            prometheusData = readFile('katalon.prom').trim()
                            if (prometheusData) {
                                //Se deja esta URL a modo de ejemplo local
                                pushgatewayUrl = "http://pushgateway-prometheus-pushgateway.default.svc.cluster.local:9091/metrics/job/katalon/hash/${env.PIPELINE_HASH}"
                                response = sh(script: "curl -X POST --data-binary @katalon.prom ${pushgatewayUrl}", returnStdout: true).trim()
                                echo "Response from Pushgateway: ${response}"
                            } else {
                                error("Prometheus data está vacío, no envía al Pushgateway")
                            }
                        }
                }*/
        
    }