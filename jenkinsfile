pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
        PUSHGATEWAY_URL = 'pushgateway:9091'
        WEBSITE_URL = 'https://www.accenture.com/es-es'
        JOB_NAME = 'accenture_es_es'
    }

    stages {
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    def xml = readFile 'katalon.xml'
                    def xmlContents = new XmlParser().parseText(xml)
                    def testResults = []

                    xmlContents.testsuite.testcase.each { testcase ->
                        testResults.add([
                            name: testcase.@name.text(),
                            classname: testcase.@classname.text(),
                            time: testcase.@time.toBigDecimal(),
                            status: testcase.@status.text()
                        ])
                    }

                    echo "Parsed ${testResults.size()} test results"
                    writeFile file: 'katalon.prom', text: toPrometheusFormat(testResults)
                }
            }
    }
/*
        stage('Send to Prometheus') {
            steps {
                prometheus([
                    jobName: 'katalon',
                    scrapeInterval: '1m',
                    scrapeTimeout: '10s',
                    metricsPath: '/metrics',
                    pushGatewayUrl: 'http://prometheus-pushgateway:9091',
                    pushGatewayJobName: 'katalon',
                    credentialsId: 'prometheus-pushgateway-credentials'
                ]) {
                    sh 'cat katalon.prom | curl --data-binary @- http://prometheus-pushgateway:9091/metrics/job/katalon'
                }
            }
        }*/
    }
}

def toPrometheusFormat(testResults) {
    testResults.collect { result ->
        """
        katalon_test_duration_seconds{classname="${result.classname}",name="${result.name}",status="${result.status}"} ${result.time}
        """.trim()
    }.join('\n')
}