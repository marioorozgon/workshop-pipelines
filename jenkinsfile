// Sacamos los metodos de parseo fuera del pipeline 
def parseXml(String xmlContent) {
    def parsedXml = new XmlSlurper().parseText(xmlContent)
    def testSuitesAttributes = [
        name: parsedXml.'@name'.text(),
        totalTime: parsedXml.'@time'.text().toFloat(),
        totalTests: parsedXml.'@tests'.text().toInteger(),
        totalFailures: parsedXml.'@failures'.text().toInteger(),
        totalErrors: parsedXml.'@errors'.text().toInteger()
    ]

    def testSuites = []

    // Iterar sobre cada <testsuite>
    parsedXml.'testsuite'.each { suite ->
        def suiteMetrics = [
            name: suite.'@name'.text(),
            timestamp: suite.'@timestamp'.text(),
            totalTime: suite.'@time'.text().toFloat(),
            totalTests: suite.'@tests'.text().toInteger(),
            skipped: suite.'@skipped'.text().toInteger(),
            totalFailures: suite.'@failures'.text().toInteger(),
            totalErrors: suite.'@errors'.text().toInteger()
        ]
        testSuites.add(suiteMetrics)
    }
    return [testSuitesAttributes: testSuitesAttributes, testSuites: testSuites]
}

def constructPrometheusData(Map parsedData) {
    // Inicializamos la cadena de datos de Prometheus
    String prometheusData = ""

    // Comprobamos si los atributos de testsuites están presentes
    if (parsedData.testsuitesAttributes) {
        def testSuitesAttributes = parsedData.testsuitesAttributes
        // Construct Prometheus data for 'testsuites' level
        prometheusData += """
# HELP katalon_testsuites_info Información global de los testsuites
# TYPE katalon_testsuites_info gauge
katalon_testsuites_info{name="${testSuitesAttributes.name ?: 'unknown'}", total_time="${testSuitesAttributes.time}", total_tests="${testSuitesAttributes.tests}", total_failures="${testSuitesAttributes.failures}", total_errors="${testSuitesAttributes.errors}"} 1
"""
    }

    // Comprobamos si la lista de testsuites está presente
    if (parsedData.testsuites) {
        parsedData.testsuites.each { testsuite ->
            // Comprobamos que el testsuite actual no es null
            if (testsuite) {
                // Append Prometheus data for 'testsuite' level
                prometheusData += """
# HELP katalon_testsuite_info Información de la suite de pruebas individual
# TYPE katalon_testsuite_info gauge
katalon_testsuite_info{name="${testsuite.name ?: 'unknown'}", timestamp="${testsuite.timestamp}", total_tests="${testsuite.tests}", skipped="${testsuite.skipped}", total_failures="${testsuite.failures}", total_errors="${testsuite.errors}", total_time="${testsuite.time}"} 1
"""
                // Comprobamos si la lista de testcases está presente
                if (testsuite.testcases) {
                    testsuite.testcases.each { testcase ->
                        // Comprobamos que el testcase actual no es null
                        if (testcase) {
                            // Convert the status to a numeric value
                            int statusValue = testcase.status == "PASSED" ? 0 : testcase.status == "FAILED" ? 1 : 2
                            prometheusData += """
# HELP katalon_testcase_duration Duración del testcase individual
# TYPE katalon_testcase_duration gauge
katalon_testcase_duration{name="${testcase.name ?: 'unknown'}", classname="${testcase.classname ?: 'unknown'}", status="${testcase.status}"} ${testcase.time}

# HELP katalon_testcase_status Estado del testcase
# TYPE katalon_testcase_status gauge
katalon_testcase_status{name="${testcase.name ?: 'unknown'}", classname="${testcase.classname ?: 'unknown'}", status="${testcase.status}"} ${statusValue}
"""
                        }
                    }
                }
            }
        }
    }

    return prometheusData
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
          PUSHGATEWAY_URL = 'http://pushgateway-prometheus-pushgateway.default.svc.cluster.local:9091/metrics/job/katalon' 
    }

    stages {
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    // katalon.xml está en el directorio actual
                    def katalonXml = readFile('katalon.xml')

                    // parseXml para parsear el XML
                    def metrics = parseXml(katalonXml)

                    // Imprimir los resultados en la consola
                    echo "Metrics parsed: ${metrics}"

                    // Construye la cadena de datos para Prometheus con las métricas
                    def prometheusData = constructPrometheusData(metrics)

                    // Escribe las métricas en un archivo
                    writeFile(file: 'katalon.prom', text: prometheusData)

                    // imprimimos el contenido de 'prometheusData'
                    echo "Prometheus data:\n${prometheusData}"
                }
            }
        }

        stage('Send to Prometheus') {
              steps {
                  script {
                      
                      def prometheusData = readFile('katalon.prom').trim()
                      if (prometheusData) {
                        //def pushgatewayHost = '127.0.0.1'
                        //def pushgatewayPort = '9091' 
                        def pushgatewayUrl = env.PUSHGATEWAY_URL
                        def response = sh(script: "curl -X POST --data-binary @katalon.prom ${pushgatewayUrl}", returnStdout: true).trim()
                        echo "Response from Pushgateway: ${response}"
                      } else {
                          error("Prometheus data está vacío, no envía al Pushgateway")
                      }
                  }
              }
          }
    }
}
