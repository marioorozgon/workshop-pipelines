// Sacamos los metodos de parseo fuera del pipeline 
//TODO ver si se puede pasar a una propia clase groovy

def parseXml(String xmlContent) {
    def parsedXml = new XmlSlurper().parseText(xmlContent)
    // Sacamos las métricas directamente del elemento testsuites
    def testsuitesMetrics = [
        name: parsedXml.'@name'.text(),
        totalTests: parsedXml.'@tests'.text().toInteger(),
        totalFailures: parsedXml.'@failures'.text().toInteger(),
        totalErrors: parsedXml.'@errors'.text().toInteger(),
        totalTime: parsedXml.'@time'.text().toFloat()
    ]
    // Aquí asumimos que sólo hay un testsuite por testsuites, si hay más, necesitarás iterar
    def testsuiteMetrics = parsedXml.testsuite.collect {
        [
            name: it.'@name'.text(),
            tests: it.'@tests'.text().toInteger(),
            failures: it.'@failures'.text().toInteger(),
            errors: it.'@errors'.text().toInteger(),
            time: it.'@time'.text().toFloat(),
            skipped: it.'@skipped'.text().toInteger(),
            timestamp: it.'@timestamp'.text()
        ]
    }

    // Recopilación de métricas de los testcase
    def testcaseMetrics = parsedXml.testsuite.testcase.collect { tc ->
        def tcMetrics = [
            name: tc.'@name'.text(),
            time: tc.'@time'.text().toFloat(),
            status: tc.'@status'.text()
        ]
        
        // Añadir campos adicionales basados en el estado
        switch (tc.'@status'.text()) {
            case 'PASSED':
                tcMetrics['result'] = 'OK'
                break
            case 'ERROR':
                tcMetrics['errorType'] = tc.error.'@type'.text()
                tcMetrics['errorMessage'] = tc.error.'@message'.text()
                break
            case 'FAILED':
                tcMetrics['failureType'] = tc.failure.'@type'.text()
                tcMetrics['failureMessage'] = tc.failure.'@message'.text()
                break
        }
        
        return tcMetrics
    }
    // Retorna ambos, testsuitesMetrics y testsuiteMetrics
    return [testsuites: testsuitesMetrics, testsuite: testsuiteMetrics, testcase: testcaseMetrics]
}


def constructPrometheusData(Map metrics, runId) {
   def prometheusData = ''

    // Métrica para testsuites
    prometheusData += "katalon_testsuites_info{name=\"${metrics.testsuites.name}\",tests=\"${metrics.testsuites.totalTests}\",failures=\"${metrics.testsuites.totalFailures}\",errors=\"${metrics.testsuites.totalErrors}\",time=\"${metrics.testsuites.totalTime}\",run_id=\"${runId}\"} 1\n"

    // Métrica para cada testsuite
    metrics.testsuite.each { ts ->
        prometheusData += "katalon_testsuite_info{name=\"${ts.name}\",tests=\"${ts.tests}\",failures=\"${ts.failures}\",errors=\"${ts.errors}\",time=\"${ts.time}\",skipped=\"${ts.skipped}\",timestamp=\"${ts.timestamp}\",run_id=\"${runId}\"} 1\n"
    }

    // Métrica para cada testcase
    /*metrics.testcase.each { tc ->
        prometheusData += "katalon_testcase_info{name=\"${tc.name}\",time=\"${tc.time}\",status=\"${tc.status}\",run_id=\"${runId}\""
        if (tc.status == 'PASSED') {
            prometheusData += ",result=\"OK\"} 1\n"
        } else {
            String detailType = tc.status == 'ERROR' ? 'error' : 'failure'
            prometheusData += ",${detailType}_type=\"${tc[detailType + 'Type']}\",${detailType}_message=\"${tc[detailType + 'Message'].replaceAll('"', '\\"')}\",run_id=\"${runId}\"} 0\n"
        }
    }*/

    return prometheusData
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
          PUSHGATEWAY_URL = 'http://localhost:9091' 
          RUN_ID = "${System.currentTimeMillis()}" // Definir runId en el entorno
    }

        stages {

          stage('List XML Reports') {
            steps {
                script {
                    // Lista el contenido del directorio xml_reports
                    sh 'ls -la xml_reports'
                }
            }
        }

        stage('Setup') {
            steps {
                script {
                    // Definiendo runId aquí
                    env.runId = "${System.currentTimeMillis()}"
                }
            }
        }
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    // Generar un timestamp único para esta ejecución
            def runTimestamp = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone('UTC'))
                    // Secciones HELP y TYPE para cada tipo de métrica, añadidas solo una vez
            def prometheusHelpType = """
# HELP katalon_testsuites_info Test Suites Information
# TYPE katalon_testsuites_info gauge
# HELP katalon_testsuite_info Test Suite Information
# TYPE katalon_testsuite_info gauge
# HELP katalon_testcase_info Test Case Information
# TYPE katalon_testcase_info gauge
"""

            def prometheusMetricData = ''

            // Lista de archivos XML
            def xmlFiles = sh(script: "ls /home/jenkins/agent/workspace/seur/xml_reports/*.xml", returnStdout: true).trim().split('\n')

            // Procesar cada archivo XML
            xmlFiles.each { filePath ->
                def katalonXml = readFile(filePath)
                def metrics = parseXml(katalonXml)
                echo "Metrics parsed for ${filePath}: ${metrics}"
                prometheusMetricData += constructPrometheusData(metrics, env.RUN_ID)
            }

            // Combina las secciones HELP/TYPE con los datos de las métricas
            def prometheusData = prometheusHelpType + prometheusMetricData

            // Escribe las métricas combinadas en un archivo
            writeFile(file: 'katalon.prom', text: prometheusData)

            echo "Combined Prometheus data:\n${prometheusData}"
                }
            }
        }

        stage('Send to Prometheus') {
              steps {
                  script {
                      
                      def prometheusData = readFile('katalon.prom').trim()
                      if (prometheusData) {
                        //def pushgatewayHost = '127.0.0.1'
                        //def pushgatewayPort = '9091' 
                        def pushgatewayUrl = "http://pushgateway-prometheus-pushgateway.default.svc.cluster.local:9091/metrics/job/katalon"
                        def response = sh(script: "curl -X POST --data-binary @katalon.prom ${pushgatewayUrl}", returnStdout: true).trim()
                        echo "Response from Pushgateway: ${response}"
                      } else {
                          error("Prometheus data está vacío, no envía al Pushgateway")
                      }
                  }
              }
          } 
    }
}