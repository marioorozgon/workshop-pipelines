// Sacamos los metodos de parseo fuera del pipeline 
def parseXml(String xmlContent) {
    def parsedXml = new XmlSlurper().parseText(xmlContent)
    def testSuites = []

    // Iterar sobre cada <testsuite>
    parsedXml.'testsuite'.each { suite ->
        def suiteMetrics = [
            name: suite.'@name'.text(),
            timestamp: suite.'@timestamp'.text(),
            totalTime: suite.'@time'.text().toFloat(),
            totalTests: suite.'@tests'.text().toInteger(),
            skipped: suite.'@skipped'.text().toInteger(),
            totalFailures: suite.'@failures'.text().toInteger(),
            totalErrors: suite.'@errors'.text().toInteger()
        ]
        testSuites.add(suiteMetrics)
    }
    return testSuites
}

def constructPrometheusData(List testSuites) {
     StringBuilder prometheusData = new StringBuilder()

    testSuites.each { suite ->
        def totalOK = (suite.totalFailures == 0 && suite.totalErrors == 0) ? 1 : 0
        
        prometheusData.append("""
        # HELP katalon_testsuite_info Información de la suite de pruebas individual
        # TYPE katalon_testsuite_info gauge
        katalon_testsuite_info{name="${suite.name}", timestamp="${suite.timestamp}", total_time="${suite.totalTime}", total_tests="${suite.totalTests}", skipped="${suite.skipped}", total_failures="${suite.totalFailures}", total_errors="${suite.totalErrors}"} 1
        """)
        
        // Continuar añadiendo más métricas si es necesario...
    }
    
    return prometheusData.toString()
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
          PUSHGATEWAY_URL = 'http://pushgateway-prometheus-pushgateway.default.svc.cluster.local:9091/metrics/job/katalon' 
    }

    stages {
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    // katalon.xml está en el directorio actual
                    def katalonXml = readFile('katalon.xml')

                    // parseXml para parsear el XML
                    def metrics = parseXml(katalonXml)

                    // Imprimir los resultados en la consola
                    echo "Metrics parsed: ${metrics}"

                    // Construye la cadena de datos para Prometheus con las métricas
                    def prometheusData = constructPrometheusData(metrics)

                    // Escribe las métricas en un archivo
                    writeFile(file: 'katalon.prom', text: prometheusData)

                    // imprimimos el contenido de 'prometheusData'
                    echo "Prometheus data:\n${prometheusData}"
                }
            }
        }

        stage('Send to Prometheus') {
              steps {
                  script {
                      
                      def prometheusData = readFile('katalon.prom').trim()
                      if (prometheusData) {
                        //def pushgatewayHost = '127.0.0.1'
                        //def pushgatewayPort = '9091' 
                        def pushgatewayUrl = env.PUSHGATEWAY_URL
                        def response = sh(script: "curl -X POST --data-binary @katalon.prom ${pushgatewayUrl}", returnStdout: true).trim()
                        echo "Response from Pushgateway: ${response}"
                      } else {
                          error("Prometheus data está vacío, no envía al Pushgateway")
                      }
                  }
              }
          }
    }
}
