// Sacamos los metodos de parseo fuera del pipeline 
//TODO ver si se puede pasar a una propia clase groovy

def parseXml(String xmlContent) {
    def parsedXml = new XmlSlurper().parseText(xmlContent)
    // Extrae los atributos del elemento 'testsuites'
    def attributes = parsedXml.attributes()
    
    // Convertimos los valores a tipos serializables
    def metrics = [
        totalTests: attributes.tests.text().toInteger(),
        totalFailures: attributes.failures.text().toInteger(),
        totalErrors: attributes.errors.text().toInteger(),
        totalTime: attributes.time.text().toFloat(),
        testName: attributes.name.text()
    ]
    return metrics
}

def constructPrometheusData(Map metrics) {
    return """
# HELP testsuite_total_tests Total number of tests for the suite
# TYPE testsuite_total_tests gauge
testsuite_total_tests{name="${metrics.testName}"} ${metrics.totalTests}

# HELP testsuite_total_failures Total number of failed tests for the suite
# TYPE testsuite_total_failures gauge
testsuite_total_failures{name="${metrics.testName}"} ${metrics.totalFailures}

# HELP testsuite_total_errors Total number of errors in tests for the suite
# TYPE testsuite_total_errors gauge
testsuite_total_errors{name="${metrics.testName}"} ${metrics.totalErrors}

# HELP testsuite_total_time Total time of test suite execution
# TYPE testsuite_total_time gauge
testsuite_total_time{name="${metrics.testName}"} ${metrics.totalTime}
"""
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
          PUSHGATEWAY_URL = 'http://localhost:9091' 
    }

    stages {
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    // katalon.xml está en el directorio actual
                    def katalonXml = readFile('JUnit_Report_GTI_ERROR.xml')

                    // parseXml para parsear el XML
                    def metrics = parseXml(katalonXml)

                    // Imprimir los resultados en la consola
                    echo "Metrics parsed: ${metrics}"

                    // Construye la cadena de datos para Prometheus con las métricas
                    def prometheusData = constructPrometheusData(metrics)

                    // Escribe las métricas en un archivo
                    writeFile(file: 'katalon.prom', text: prometheusData)

                    // imprimimos el contenido de 'prometheusData'
                    echo "Prometheus data:\n${prometheusData}"
                }
            }
        }

        stage('Send to Prometheus') {
              steps {
                  script {
                      
                      def prometheusData = readFile('katalon.prom').trim()
                      if (prometheusData) {
                        //def pushgatewayHost = '127.0.0.1'
                        //def pushgatewayPort = '9091' 
                        def pushgatewayUrl = "http://pushgateway-prometheus-pushgateway.default.svc.cluster.local:9091/metrics/job/katalon"
                        def response = sh(script: "curl -X POST --data-binary @katalon.prom ${pushgatewayUrl}", returnStdout: true).trim()
                        echo "Response from Pushgateway: ${response}"
                      } else {
                          error("Prometheus data está vacío, no envía al Pushgateway")
                      }
                  }
              }
          }
    }
}