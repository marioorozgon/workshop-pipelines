// Sacamos los metodos de parseo fuera del pipeline 
//TODO ver si se puede pasar a una propia clase groovy

def parseXml(String xmlContent) {
    def parsedXml = new XmlSlurper().parseText(xmlContent)
    def testSuites = parsedXml.'@'.collectEntries { [(it.key()): it.value().text()] }
    def testSuitesMetrics = testSuites.collect { key, value ->
        if (['tests', 'failures', 'errors'].contains(key)) {
            value = value.toInteger()
        } else if (['time'].contains(key)) {
            value = value.toFloat()
        }
        [(key): value]
    }

    // Lista de suites y casos
    def suitesList = []
    parsedXml.testsuite.each { suite ->
        def suiteMetrics = suite.'@'.collectEntries { [(it.key()): it.value().text()] }
        suiteMetrics.put('testcases', [])
        suite.testcase.each { testcase ->
            def testcaseMetrics = testcase.'@'.collectEntries { [(it.key()): it.value().text()] }
            suiteMetrics.get('testcases').add(testcaseMetrics)
        }
        suitesList.add(suiteMetrics)
    }
    testSuitesMetrics.put('suites', suitesList)

    return testSuitesMetrics
}

def constructPrometheusData(Map metrics) {
    // Inicia con los datos de testsuites
    def prometheusData = """
# HELP katalon_testsuites_total Total number of testsuites
# TYPE katalon_testsuites_total gauge
katalon_testsuites_total{name="${metrics.name}"} ${metrics.tests}

# HELP katalon_testsuites_failures Total number of failures in testsuites
# TYPE katalon_testsuites_failures gauge
katalon_testsuites_failures{name="${metrics.name}"} ${metrics.failures}

# HELP katalon_testsuites_errors Total number of errors in testsuites
# TYPE katalon_testsuites_errors gauge
katalon_testsuites_errors{name="${metrics.name}"} ${metrics.errors}

# HELP katalon_testsuites_time Total execution time for testsuites
# TYPE katalon_testsuites_time gauge
katalon_testsuites_time{name="${metrics.name}"} ${metrics.time}
"""

    // Añade los datos de cada suite y cada caso de prueba
    metrics.suites.each { suite ->
        prometheusData += """
# HELP katalon_testsuite_total Total number of tests for the suite
# TYPE katalon_testsuite_total gauge
katalon_testsuite_total{name="${suite.name}", timestamp="${suite.timestamp}"} ${suite.tests}

# HELP katalon_testsuite_failures Total number of failures in the suite
# TYPE katalon_testsuite_failures gauge
katalon_testsuite_failures{name="${suite.name}", timestamp="${suite.timestamp}"} ${suite.failures}

# HELP katalon_testsuite_errors Total number of errors in the suite
# TYPE katalon_testsuite_errors gauge
katalon_testsuite_errors{name="${suite.name}", timestamp="${suite.timestamp}"} ${suite.errors}

# HELP katalon_testsuite_time Total execution time for the suite
# TYPE katalon_testsuite_time gauge
katalon_testsuite_time{name="${suite.name}", timestamp="${suite.timestamp}"} ${suite.time}

# HELP katalon_testsuite_skipped Total number of skipped tests in the suite
# TYPE katalon_testsuite_skipped gauge
katalon_testsuite_skipped{name="${suite.name}", timestamp="${suite.timestamp}"} ${suite.skipped}
"""

        suite.testcases.each { testcase ->
            prometheusData += """
# HELP katalon_testcase_time Execution time for test case
# TYPE katalon_testcase_time gauge
katalon_testcase_time{name="${suite.name}", testcase="${testcase.name}", status="${testcase.status}"} ${testcase.time}
"""
        }
    }

    return prometheusData
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
          PUSHGATEWAY_URL = 'http://localhost:9091' 
    }

    stages {
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    // katalon.xml está en el directorio actual
                    def katalonXml = readFile('katalon.xml')

                    // parseXml para parsear el XML
                    def metrics = parseXml(katalonXml)

                    // Imprimir los resultados en la consola
                    echo "Metrics parsed: ${metrics}"

                    // Construye la cadena de datos para Prometheus con las métricas
                    def prometheusData = constructPrometheusData(metrics)

                    // Escribe las métricas en un archivo
                    writeFile(file: 'katalon.prom', text: prometheusData)

                    // imprimimos el contenido de 'prometheusData'
                    echo "Prometheus data:\n${prometheusData}"
                }
            }
        }

        stage('Send to Prometheus') {
              steps {
                  script {
                      
                      def prometheusData = readFile('katalon.prom').trim()
                      if (prometheusData) {
                        //def pushgatewayHost = '127.0.0.1'
                        //def pushgatewayPort = '9091' 
                        def pushgatewayUrl = "http://pushgateway-prometheus-pushgateway.default.svc.cluster.local:9091/metrics/job/katalon"
                        def response = sh(script: "curl -X POST --data-binary @katalon.prom ${pushgatewayUrl}", returnStdout: true).trim()
                        echo "Response from Pushgateway: ${response}"
                      } else {
                          error("Prometheus data está vacío, no envía al Pushgateway")
                      }
                  }
              }
          }
    }
}