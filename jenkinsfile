// Sacamos los metodos de parseo fuera del pipeline 
//TODO ver si se puede pasar a una propia clase groovy
def parseXml(String xmlContent) {
    def parsedXml = new XmlSlurper().parseText(xmlContent)
    def metricsList = []

    parsedXml.'**'.findAll { it.name() == 'testsuite' }.each { testsuite ->
        def testsuiteMetrics = [
            name: testsuite.@name.text(),
            timestamp: testsuite.@timestamp.text(),
            time: testsuite.@time.text().toFloat(),
            tests: testsuite.@tests.text().toInteger(),
            skipped: testsuite.@skipped.text().toInteger(),
            failures: testsuite.@failures.text().toInteger(),
            errors: testsuite.@errors.text().toInteger(),
            testcases: []
        ]

        testsuite.'**'.findAll { it.name() == 'testcase' }.each { testcase ->
            def testcaseMetrics = [
                name: testcase.@name.text(),
                time: testcase.@time.text().toFloat(),
                status: testcase.@status?.text() ?: 'OK',
                failureMessage: (testcase.'failure'*.text().join(', ') ?: 'OK'),
                failureType: (testcase.'failure'*.@type.join(', ') ?: ''),
                errorMessage: (testcase.'error'*.text().join(', ') ?: ''),
                errorType: (testcase.'error'*.@type.join(', ') ?: '')
            ]
            testsuiteMetrics.testcases << testcaseMetrics
        }

        metricsList << testsuiteMetrics
    }

    return metricsList
}

def constructPrometheusData(List metricsList) {
    def prometheusDataBuilder = new StringBuilder()

    // Añade métricas de testsuite
    metricsList.each { suite ->
        prometheusDataBuilder.append("""
# HELP testsuite_${suite.name}_total_tests Total number of tests for ${suite.name}
# TYPE testsuite_${suite.name}_total_tests gauge
testsuite_${suite.name}_total_tests ${suite.tests}

# HELP testsuite_${suite.name}_total_time Total time for ${suite.name}
# TYPE testsuite_${suite.name}_total_time gauge
testsuite_${suite.name}_total_time ${suite.time}

# HELP testsuite_${suite.name}_total_failures Total number of failures for ${suite.name}
# TYPE testsuite_${suite.name}_total_failures gauge
testsuite_${suite.name}_total_failures ${suite.failures}

# HELP testsuite_${suite.name}_total_errors Total number of errors for ${suite.name}
# TYPE testsuite_${suite.name}_total_errors gauge
testsuite_${suite.name}_total_errors ${suite.errors}

""")

        // Añade métricas de testcase
        suite.testcases.each { testCase ->
            prometheusDataBuilder.append("""
# HELP testcase_${testCase.name}_time Execution time for ${testCase.name}
# TYPE testcase_${testCase.name}_time gauge
testcase_${testCase.name}_time ${testCase.time}

# HELP testcase_${testCase.name}_status Status for ${testCase.name}
# TYPE testcase_${testCase.name}_status gauge
testcase_${testCase.name}_status ${testCase.status == 'OK' ? 1 : 0}  # Assuming 'OK' status is 1, others are 0

""")
        }
    }

    return prometheusDataBuilder.toString()
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
          PUSHGATEWAY_URL = 'http://localhost:9091' 
    }

    stages {
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    // katalon.xml está en el directorio actual
                    def katalonXml = readFile('JUnit_Report_GTI_ERROR.xml')

                    // parseXml para parsear el XML
                    def metrics = parseXml(katalonXml)

                    // Imprimir los resultados en la consola
                    echo "Metrics parsed: ${metrics}"

                    // Construye la cadena de datos para Prometheus con las métricas
                    def prometheusData = constructPrometheusData(metrics)

                    // Escribe las métricas en un archivo
                    writeFile(file: 'katalon.prom', text: prometheusData)

                    // imprimimos el contenido de 'prometheusData'
                    echo "Prometheus data:\n${prometheusData}"
                }
            }
        }

        stage('Send to Prometheus') {
              steps {
                  script {
                      
                      def prometheusData = readFile('katalon.prom').trim()
                      if (prometheusData) {
                        //def pushgatewayHost = '127.0.0.1'
                        //def pushgatewayPort = '9091' 
                        def pushgatewayUrl = "http://pushgateway-prometheus-pushgateway.default.svc.cluster.local:9091/metrics/job/katalon"
                        def response = sh(script: "curl -X POST --data-binary @katalon.prom ${pushgatewayUrl}", returnStdout: true).trim()
                        echo "Response from Pushgateway: ${response}"
                      } else {
                          error("Prometheus data está vacío, no envía al Pushgateway")
                      }
                  }
              }
          }
    }
}
