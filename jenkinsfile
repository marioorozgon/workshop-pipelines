// Sacamos los metodos de parseo fuera del pipeline 
//TODO ver si se puede pasar a una propia clase groovy
import groovy.util.slurpersupport.GPathResult

// Esta función parsea el XML y extrae las métricas
def parseXml(String xmlContent) {
    def parsedXml = new XmlSlurper().parseText(xmlContent)
    def testSuitesAttributes = [
        name: parsedXml.'@name'.toString(),
        totalTime: parsedXml.'@time'.toString(),
        totalTests: parsedXml.'@tests'.toString(),
        totalFailures: parsedXml.'@failures'.toString(),
        totalErrors: parsedXml.'@errors'.toString()
    ]

    def testSuites = parsedXml.testsuite.collect { GPathResult suite ->
        [
            name: suite.'@name'.toString(),
            timestamp: suite.'@timestamp'.toString(),
            totalTime: suite.'@time'.toString(),
            totalTests: suite.'@tests'.toString(),
            skipped: suite.'@skipped'.toString(),
            totalFailures: suite.'@failures'.toString(),
            totalErrors: suite.'@errors'.toString(),
            testcases: suite.testcase.collect { GPathResult tc ->
                [
                    name: tc.'@name'.toString(),
                    time: tc.'@time'.toString(),
                    classname: tc.'@classname'.toString(),
                    status: tc.'@status'.toString()
                ]
            }
        ]
    }

    return [testSuitesAttributes: testSuitesAttributes, testSuites: testSuites]
}

// Esta función construye los datos para Prometheus
def constructPrometheusData(Map metrics) {
    StringBuilder prometheusData = new StringBuilder()
    prometheusData.append("""
# HELP katalon_testsuite_duration_seconds Duration of test suite
# TYPE katalon_testsuite_duration_seconds gauge
""")

    metrics.testSuites.each { suite ->
        prometheusData.append("katalon_testsuite_duration_seconds{name=\"${suite.name}\", timestamp=\"${suite.timestamp}\"} ${suite.totalTime}\n")
    }

    metrics.testSuitesAttributes.each { attr, value ->
        prometheusData.append("""
# HELP katalon_${attr}_total Total ${attr} of test suites
# TYPE katalon_${attr}_total gauge
katalon_${attr}_total ${value}
""")
    }

    metrics.testSuites*.testcases.flatten().each { testcase ->
        prometheusData.append("""
# HELP katalon_testcase_duration_seconds Duration of test case
# TYPE katalon_testcase_duration_seconds gauge
katalon_testcase_duration_seconds{name="${testcase.name}", classname="${testcase.classname}", status="${testcase.status}"} ${testcase.time}
""")
    }

    return prometheusData.toString()
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jdk'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jdk
      image: docker.io/eclipse-temurin:20.0.1_9-jdk
      command:
        - cat
      tty: true
      volumeMounts:
        - name: m2-cache
          mountPath: /root/.m2
    - name: podman
      image: quay.io/containers/podman:v4.5.1
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27.3
      command:
        - cat
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
  volumes:
    - name: m2-cache
      hostPath:
        path: /data/m2-cache
        type: DirectoryOrCreate
    - name: shared-data
      hostPath:
        path: /path/to/shared/folder
        type: DirectoryOrCreate
'''
        }
    }

    environment {
          PUSHGATEWAY_URL = 'http://localhost:9091' 
    }

    stages {
       
        stage('Parse Katalon XML') {
            steps {
                script {
                    // katalon.xml está en el directorio actual
                    def katalonXml = readFile('katalon.xml')

                    // parseXml para parsear el XML
                    def metrics = parseXml(katalonXml)

                    // Imprimir los resultados en la consola
                    echo "Metrics parsed: ${metrics}"

                    // Construye la cadena de datos para Prometheus con las métricas
                    def prometheusData = constructPrometheusData(metrics)

                    // Escribe las métricas en un archivo
                    writeFile(file: 'katalon.prom', text: prometheusData)

                    // imprimimos el contenido de 'prometheusData'
                    echo "Prometheus data:\n${prometheusData}"
                }
            }
        }

        stage('Send to Prometheus') {
              steps {
                  script {
                      
                      def prometheusData = readFile('katalon.prom').trim()
                      if (prometheusData) {
                        //def pushgatewayHost = '127.0.0.1'
                        //def pushgatewayPort = '9091' 
                        def pushgatewayUrl = "http://pushgateway-prometheus-pushgateway.default.svc.cluster.local:9091/metrics/job/katalon"
                        def response = sh(script: "curl -X POST --data-binary @katalon.prom ${pushgatewayUrl}", returnStdout: true).trim()
                        echo "Response from Pushgateway: ${response}"
                      } else {
                          error("Prometheus data está vacío, no envía al Pushgateway")
                      }
                  }
              }
          }
    }
}